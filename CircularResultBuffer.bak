# Class: CircularResultBuffer
# Implements efficient and safe result buffer.
# v. 1.0, 9/21/2009, D. Graham
#

#include <iostream>
#include <list>

using namespace std;

class CircularResultBuffer {
    public:
        CircularResultBuffer(void *);
        int reset();
        int startResult(int);
        int addResultData(list<char>);
        list<char> readResult(int);
        int getNewDataId();
    private:
        int findDataId(int);
        int getData(char *,size_t);
        int putData(char *,size_t);
        int travData(size_t);
        char buf[100];
        char buf2[100];
        char * startAddress;
        char * endAddress;
        char * firstResOffset;
        char * nextDataId;
        size_t currLength;
        char * currLengthAddr;
        char * currStartOfRes;
        char * currResPtr;
        char * startOfData;
        size_t segSize;
}

## Implementation

CircularResultBuffer::CircularResultBuffer(void * ptr) {
    this->startAddress = (char *) ptr;
    this->segSize = *((size_t *) this->startAddress);
    this->endAddress = this->startAddress + this->segSize;
    this->nextDataId = this->startAddress + sizeof(size_t);
    this->firstResOffset = this->nextDataId + sizeof(int);
    this->startOfData = this->firstResOffset + sizeof(size_t);
    this->currStartOfRes = NULL;
    this->currLengthAddr = NULL;
    this->currResPtr = NULL;
    this->currLength = 0;
}

int CircularResultBuffer::reset() {
    this->segSize = *((size_t *) this->startAddress);
    this->endAddress = this->startAddress + this->segSize;
    this->nextDataId = this->startAddress + sizeof(size_t);
    this->firstResOffset = this->nextDataId + sizeof(int);
    this->startOfData = this->firstResOffset + sizeof(size_t);
    this->currStartOfRes = NULL;
    this->currLengthAddr = NULL;
    this->currResPtr = NULL;
    this->currLength = 0;
    *((size_t *) this->firstResOffset) = 0;
    *((int *) this->startOfData) = -1;
    return 0;
}

int getData(char * b, size_t sz) {
    size_t i;
    if (sz >= 100) {
        return(-1);
    }
    for (i = 0; i < sz; i++) {
        if (this->currResPtr == this->endAddress) {
            this->currResPtr = this->startOfData;
        }
        b[i] = *(this->currResPtr);
        this->currResPtr = this->currResPtr + 1;
    }
    return(0);
}

int travData(size_t sz) {
    size_t i;
    for (i = 0; i < sz; i++) {
        if (this->currResPtr == this->endAddress) {
            this->currResPtr = this->startOfData;
        }
        this->currResPtr = this->currResPtr + 1;
    }
    return(0);
}

int putData(char * b, size_t sz) {
    size_t i;
    char * saveResPtr;
    size_t k;
    if (sz >= 100) {
        return(-1);
    }
    for (i = 0; i < sz; i++) {
        if (this->currResPtr == this->endAddress) {
            this->currResPtr = this->startOfData;
        }
        if (this->currResPtr == this->currStartOfRes) {
            return(-2) /* result larger than data segment */
        }
        if (this->currResPtr == (this->startOfData + *((size_t *) this->firstResOffset))) {
            /* Overwrite old data */
            saveResPtr = this->currResPtr;
            this->travData(sizeof(int));
            this->getData(this->buf2, sizeof(size_t));
            k = *((size_t *) this->buf2);
            this->travData(k);
            *((size_t *) this->firstResOffset) = this->currResPtr - this->startOfData;
            this->currResPtr = saveResPtr;
        }
        *(this->currResPtr) = b[i];
        this->currResPtr = this->currResPtr + 1;
    }
    return(0);
}

int CircularResultBuffer::findDataId(int data_id) {
    size_t infiniteCnt = 0;
    this->currStartOfRes = startOfData + *((size_t *) this->firstResOffset);
    this->currResPtr = this->currStartOfRes;
    this->getData(this->buf, sizeof(int));
    this->currLengthAddr = this->currResPtr;
    while (*((int *) this->buf) != data_id) {
        infiniteCnt++;
        if (infiniteCnt >= this->segSize) {
            return(-1);
        }
        if (*((int *) this->buf) == -1) {
            return(-2);
        }
        this->getData(this->buf, sizeof(size_t));
        this->travData(*((size_t *) this->buf));
        this->currStartOfRes = this->currResPtr;
        this->getData(this->buf, sizeof(int));
        this->currLengthAddr = this->currResPtr;
    }
    return(0);
}
        
int CircularResultBuffer::startResult(int data_id) {
    int ret;
    char * saveResPtr;
    if ((ret = this->findDataId(-1)) < 0) {
        this->reset();
        if ((this->findDataId(-1)) < 0) {
            cerr << "Panic: Error Corrupt data segment\n";
            exit(-1);
        }
        return(ret);
    }
    *((int *) this->buf) = data_id;
    this->currResPtr = this->currStartOfRes;
    if ((ret = this->putData(this->buf, sizeof(int))) < 0) {
        this->reset();
        return(ret);
    }
    *((size_t *) this->buf) = 0;
    if ((ret = this->putData(this->buf, sizeof(size_t))) < 0) {
        this->reset();
        return(ret);
    }
    saveResPtr = this->currResPtr;
    *((int *) this->buf) = -1;
    if ((ret = this->putData(this->buf, sizeof(int))) < 0) {
        this->reset();
        return(ret);
    }
    this->currResPtr = saveResPtr;
    this->currLength = 0;
    return(0);
}

int CircularResultBuffer::addResultData(list<char> res) {
    char * saveResPtr;
    int ret;
    if (this->currResPtr == NULL) {
        return(-3); /* Did not call startResult */
    }
    while (!res.empty()) {
        this->buf[0] = res.front();
        if ((ret = this->putData(this->buf, 1)) < 0) {
            this->reset();
            return(ret);
        }
        this->currLength++; 
        res.pop_front();
    }
    *((size_t *) this->buf) = this->currLength;
    saveResPtr = this->currResPtr;
    this->currResPtr = this->currLengthAddr;
    if ((ret = this->putData(this->buf, sizeof(size_t))) < 0) {
        this->reset();
        return(ret);
    }
    this->currResPtr = saveResPtr;
    saveResPtr = this->currResPtr;
    *((int *) this->buf) = -1;
    if ((ret = this->putData(this->buf, sizeof(int))) < 0) {
        this->reset();
        return(ret);
    }
    this->currResPtr = saveResPtr;
    return(0);
}
 
